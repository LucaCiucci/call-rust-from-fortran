// We use this build file to generate the C/C++ header files for the Rust library.
// This makes the integration process in C++ much easier as we can just "#include"
// the generated "bindings/rust.hpp" file.
// If you plan to just use the Rust library in Fortran, you can ignore this file
// (you have to maintain the interface manually).
//
// see https://github.com/mozilla/cbindgen/blob/v0.24.3/docs.md

use std::env;

mod fortran;
use fortran::Fortran;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();

    let bindings = cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_header("// Generated by cbindgen, DO NOT EDIT");

    // generate C bindings
    bindings
        .clone()
        .with_language(cbindgen::Language::C)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("bindings/rust.h");

    // generate C++ bindings
    bindings
        .clone()
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("bindings/rust.hpp");

    // generate Fortran bindings
    bindings
        .with_custom_language(Fortran("rust".to_string()))
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("bindings/rust.f90");
}