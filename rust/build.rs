// We use this build file to generate the interface bindings for the Rust
// library.
// It will generate:
// - `bindings/rust.h`: the C bindings
// - `bindings/rust.hpp`: the C++ bindings
// - `bindings/rust.f90`: the Fortran bindings
//
// see https://github.com/mozilla/cbindgen/blob/v0.24.3/docs.md

use std::env;
use cbindgen_fortran::{cbindgen, Fortran};

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();

    let bindings = cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_header("// Generated by cbindgen, DO NOT EDIT");

    // generate C bindings
    bindings
        .clone()
        .with_language(cbindgen::Language::C)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("bindings/rust.h");

    // generate C++ bindings
    bindings
        .clone()
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("bindings/rust.hpp");

    // generate Fortran bindings
    bindings
        .with_custom_language(Fortran::new("rust"))
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file("bindings/rust.f90");
}